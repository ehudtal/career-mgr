require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Admin::MetrosController, type: :controller do
  render_views
  
  let(:user) { create :admin_user }

  # This should return the minimal set of attributes required to create a valid
  # Interest. As you add validations to Interest, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { attributes_for :metro }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # InterestsController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  
  before { sign_in user }

  describe 'when signed-in user is not admin' do
    let(:user) { create :fellow_user }

    it "redirects GET #index to home" do
      get :index, params: {}, session: valid_session
      expect(response).to redirect_to(root_path)
    end
    
    describe "GET #list" do
      it "returns a success response" do
        metro = Metro.create! valid_attributes
        get :list, params: {}, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe "GET #index.json" do
    it "returns a success response" do
      metro = Metro.create! valid_attributes
      get :index, params: {format: 'json'}, session: valid_session
      expect(response).to be_successful
      
      json = JSON.parse(response.body)
      expect(json).to be_an(Array)
      expect(json).to include(metro.name)
    end
  end

  describe "GET #list" do
    it "returns a success response" do
      metro = Metro.create! valid_attributes
      get :list, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end
  
  describe 'GET #search' do
    let(:postal_code) { create :postal_code, msa_code: '1001' }
    let(:metro) { create :metro, code: postal_code.msa_code }
    
    describe 'when metro is found' do
      before { postal_code; metro }
    
      it "returns a success response" do
        get :search, params: {zip: postal_code.code, format: 'json'}, session: valid_session
        expect(response).to be_successful
      end
      
      it "returns the metro" do
        get :search, params: {zip: postal_code.code, format: 'json'}, session: valid_session
        
        json = JSON.parse(response.body)
        expect(json['name']).to eq(metro.name)
      end
    end

    describe 'when metro is NOT found' do
      before { postal_code }
      
      it "returns a success response" do
        get :search, params: {zip: postal_code.code, format: 'json'}, session: valid_session
        expect(response).to be_successful
      end
      
      it "returns the metro" do
        get :search, params: {zip: postal_code.code, format: 'json'}, session: valid_session
        
        json = JSON.parse(response.body)
        expect(json).to be_nil
      end
    end

    describe 'when postal_code is NOT found' do
      it "returns a success response" do
        get :search, params: {zip: '00000', format: 'json'}, session: valid_session
        expect(response).to be_successful
      end
      
      it "returns the metro" do
        get :search, params: {zip: '00000', format: 'json'}, session: valid_session
        
        json = JSON.parse(response.body)
        expect(json).to be_nil
      end
    end
  end
end
